#!/usr/bin/env python3
"""
Vulnerability Scanner for CS 1060 Homework 5
Scans localhost for open ports and tests common credentials on HTTP and SSH services.

Created with assistance from Claude Sonnet 4.5 (Anthropic)
"""

import os
import sys

# Suppress ALL warnings before any other imports
import warnings
warnings.filterwarnings('ignore')
os.environ['PYTHONWARNINGS'] = 'ignore'

import nmap
import requests
import paramiko
import socket
import argparse
import logging
from requests.auth import HTTPBasicAuth
from contextlib import contextmanager

# Suppress warnings and errors from libraries
logging.getLogger('paramiko').setLevel(logging.CRITICAL)
requests.packages.urllib3.disable_warnings()

# Credential dictionary to test
credentials = {
    'admin': 'admin',
    'root': 'abc123',
    'skroob': '12345'
}

@contextmanager
def suppress_stderr():
    """Context manager to suppress stderr output"""
    devnull = os.open(os.devnull, os.O_WRONLY)
    old_stderr = os.dup(2)
    os.dup2(devnull, 2)
    os.close(devnull)
    try:
        yield
    finally:
        os.dup2(old_stderr, 2)
        os.close(old_stderr)

def verbose_print(message, verbose=False):
    """Print message only if verbose mode is enabled"""
    if verbose:
        print(f"[VERBOSE] {message}", file=sys.stderr)

def scan_ports(host='127.0.0.1', verbose=False):
    """Scan for open TCP ports on host, excluding ports >= 9000"""
    verbose_print(f"Scanning ports on {host}...", verbose)
    nm = nmap.PortScanner()

    # Scan ports 1-8999
    nm.scan(host, '1-8999', arguments='-T4')

    open_ports = []
    if host in nm.all_hosts():
        for proto in nm[host].all_protocols():
            if proto == 'tcp':
                ports = nm[host][proto].keys()
                for port in ports:
                    if nm[host][proto][port]['state'] == 'open':
                        open_ports.append(port)
                        verbose_print(f"Found open port: {port}", verbose)

    return sorted(open_ports)

def test_http(host, port, username, password, verbose=False):
    """Test HTTP basic authentication"""
    verbose_print(f"Testing HTTP on {host}:{port} with {username}:{password}", verbose)

    try:
        # Try HTTP
        url = f"http://{host}:{port}"
        response = requests.get(url, auth=HTTPBasicAuth(username, password), timeout=5)

        if response.status_code == 200:
            output = response.text.strip()
            print(f"http://{username}:{password}@{host}:{port} {output}")
            return True
    except Exception as e:
        verbose_print(f"HTTP test failed: {e}", verbose)

    return False

def test_ssh(host, port, username, password, verbose=False):
    """Test SSH password authentication"""
    verbose_print(f"Testing SSH on {host}:{port} with {username}:{password}", verbose)

    client = None
    try:
        # Suppress stderr to hide paramiko's internal exceptions
        with suppress_stderr():
            client = paramiko.SSHClient()
            client.set_missing_host_key_policy(paramiko.AutoAddPolicy())

            # Attempt connection with timeout
            client.connect(
                host,
                port=port,
                username=username,
                password=password,
                timeout=3,
                allow_agent=False,
                look_for_keys=False,
                banner_timeout=3,
                auth_timeout=3
            )

            # Try to get the welcome banner or execute a simple command
            transport = client.get_transport()

            # Try to get server banner first
            output = ""
            banner = transport.get_banner()
            if banner:
                output = banner.decode('utf-8', errors='ignore').strip()

            # If no banner, try opening a session
            if not output:
                try:
                    channel = transport.open_session()
                    channel.settimeout(2)

                    # Wait briefly for data
                    import time
                    time.sleep(0.5)

                    # Try to receive data
                    if channel.recv_ready():
                        output = channel.recv(1024).decode('utf-8', errors='ignore').strip()

                    channel.close()
                except:
                    pass

        print(f"ssh://{username}:{password}@{host}:{port} {output}")
        return True

    except Exception as e:
        verbose_print(f"SSH test failed: {e}", verbose)
    finally:
        if client:
            try:
                with suppress_stderr():
                    client.close()
            except:
                pass

    return False

def is_ssh_port(host, port, verbose=False):
    """Check if port is running SSH by attempting to read banner"""
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(2)
        sock.connect((host, port))
        banner = sock.recv(100).decode('utf-8', errors='ignore')
        sock.close()

        if 'SSH' in banner:
            verbose_print(f"Port {port} appears to be SSH", verbose)
            return True
    except:
        pass

    return False

def is_http_port(host, port, verbose=False):
    """Check if port is running HTTP"""
    try:
        response = requests.get(f"http://{host}:{port}", timeout=2)
        verbose_print(f"Port {port} appears to be HTTP", verbose)
        return True
    except requests.exceptions.RequestException:
        # Could be HTTP requiring auth
        try:
            response = requests.get(f"http://{host}:{port}", timeout=2, auth=HTTPBasicAuth('test', 'test'))
            verbose_print(f"Port {port} appears to be HTTP (with auth)", verbose)
            return True
        except:
            pass
    except:
        pass

    return False

def scan_vulnerabilities(host='127.0.0.1', verbose=False):
    """Main scanning function"""
    open_ports = scan_ports(host, verbose)

    for port in open_ports:
        verbose_print(f"Checking port {port}...", verbose)

        # Determine if it's SSH or HTTP
        is_ssh = is_ssh_port(host, port, verbose)
        is_http = is_http_port(host, port, verbose)

        # Try credentials
        for username, password in credentials.items():
            if is_http:
                test_http(host, port, username, password, verbose)

            if is_ssh:
                test_ssh(host, port, username, password, verbose)

            # If we don't know what it is, try both
            if not is_ssh and not is_http:
                test_http(host, port, username, password, verbose)
                test_ssh(host, port, username, password, verbose)

def main():
    parser = argparse.ArgumentParser(description='Vulnerability scanner for localhost')
    parser.add_argument('-v', '--verbose', action='store_true', help='Enable verbose output')
    args = parser.parse_args()

    scan_vulnerabilities('127.0.0.1', verbose=args.verbose)

if __name__ == '__main__':
    main()
